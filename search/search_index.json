{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Swordphish Swordphish is a platform allowing to create and manage fake phishing campaigns. The goal of Swordphish is to raise awareness of your users regarding phishing easily and in a secure way. We believe that it's totally utopian to reach the goal of zero click on a phishing campaign, but we believe we can reduce the number of victims and overall increase the number of reporting to security teams by training people using this kind of tool. Identifying security contacts may be hard in a big structure like ours, that's why we developed Swordphish and a mail client button helping our users to report suspicious mail to security teams just by clicking on a button. No more intranet hunting looking for that security contact, just click and it's done! This choice seriously improved the visibility on what our users are receiving, and we decided to offer it to the community! Swordphish can be used to train people identifying suspicious mails, and it can help checking that people report correctly the mails to security teams.","title":"Swordphish"},{"location":"#swordphish","text":"Swordphish is a platform allowing to create and manage fake phishing campaigns. The goal of Swordphish is to raise awareness of your users regarding phishing easily and in a secure way. We believe that it's totally utopian to reach the goal of zero click on a phishing campaign, but we believe we can reduce the number of victims and overall increase the number of reporting to security teams by training people using this kind of tool. Identifying security contacts may be hard in a big structure like ours, that's why we developed Swordphish and a mail client button helping our users to report suspicious mail to security teams just by clicking on a button. No more intranet hunting looking for that security contact, just click and it's done! This choice seriously improved the visibility on what our users are receiving, and we decided to offer it to the community! Swordphish can be used to train people identifying suspicious mails, and it can help checking that people report correctly the mails to security teams.","title":"Swordphish"},{"location":"campaigns/","text":"Campaigns A campaign is the organization of what you will send, to whom and when. You can create three kind of campaign which will be discussed below. But here are the mandatory fields used in both campaign types: Name : name of the campaign, it's up to you, but you can't have two campaigns with the same name Targets : chose one or more targets list to launch awareness on Start date : the exact date (year, month, day, hour and minute) the campaign will be automatically started. End date : the exact date when the campaign will be stopped (no more click will be taken in account after this date and the results will be downloadable). On behalf of : the left part of the mail address (without domain) that will send the mails, example: firstname.lastname From domain : the domain used to send the mail (selected from a drop-down list) Display name : the full name that will be displayed next to the mail address, ex: Display Name < not.displayname@domain.com > Mail template : the mail that will be sent to the targets (the drop-down list is filtered according to the template type) Enable mail tracker : this checkbox allows you to add a blank image or not to track the mail opening Simple campaign A \"simple campaign\" allow you to send mails with links and to execute an action when the targets click on them. The dedicated fields for this kind of campaign are the followings: Action after click : define what will be displayed to the user after clicking on the link. It can be a redirection or an awareness webpage. Host domain : defines the domain that will host the redirection or the awareness webpage. The link in the mail will be updated automatically. Campaign with attachment With this kind of campaign you can define the mail template you will use and the attachment to add into it. You can choose the dedicated template using the \"Attachment template\" field, and you can add or not a tracker in it to detect the openings. Fake form campaign The fake forms campaigns works like the simples campaigns except that you can display a previously built fake form. You can also define an action if the target submits the form. This can be a redirection or an awareness web page. The fake form, and the action after submit will be hosted using the domain defined in the \"Host domain\" field Fake ransom campaign Test feature Once your campaign is created, it can be tested using the test functionality. By clicking on the following button, a popup will be displayed to specify a mail address to receive the mail. This will allow you to test the whole campaign without polluting the statistics before the beginning. Dashboard Once your campaign is started, you can display a dashboard to get campaign progress: By clicking on the following button, a popup will be display useful information about your campaign: IDs submission This functionality allows you to submit ID from targets who signaled the mail to security teams. Ids can be found: In the links generated in the received mail In the mail headers In the trackers urls You can paste full links, ids will be extracted automatically. Downloading results Anonymous results can be downloaded using the dedicated button. A XLSX file will be dropped automatically (can take some time for a big campaign). In the results the mail address is deleted and replaced by the targets IDs. This behavior has been asked by French trade unions, to prevent identifying people. But you can bypass this by adding a tag with the mail or name. We do not recommend this as we're not here to reprimand users!","title":"Campaigns"},{"location":"campaigns/#campaigns","text":"A campaign is the organization of what you will send, to whom and when. You can create three kind of campaign which will be discussed below. But here are the mandatory fields used in both campaign types: Name : name of the campaign, it's up to you, but you can't have two campaigns with the same name Targets : chose one or more targets list to launch awareness on Start date : the exact date (year, month, day, hour and minute) the campaign will be automatically started. End date : the exact date when the campaign will be stopped (no more click will be taken in account after this date and the results will be downloadable). On behalf of : the left part of the mail address (without domain) that will send the mails, example: firstname.lastname From domain : the domain used to send the mail (selected from a drop-down list) Display name : the full name that will be displayed next to the mail address, ex: Display Name < not.displayname@domain.com > Mail template : the mail that will be sent to the targets (the drop-down list is filtered according to the template type) Enable mail tracker : this checkbox allows you to add a blank image or not to track the mail opening","title":"Campaigns"},{"location":"campaigns/#simple-campaign","text":"A \"simple campaign\" allow you to send mails with links and to execute an action when the targets click on them. The dedicated fields for this kind of campaign are the followings: Action after click : define what will be displayed to the user after clicking on the link. It can be a redirection or an awareness webpage. Host domain : defines the domain that will host the redirection or the awareness webpage. The link in the mail will be updated automatically.","title":"Simple campaign"},{"location":"campaigns/#campaign-with-attachment","text":"With this kind of campaign you can define the mail template you will use and the attachment to add into it. You can choose the dedicated template using the \"Attachment template\" field, and you can add or not a tracker in it to detect the openings.","title":"Campaign with attachment"},{"location":"campaigns/#fake-form-campaign","text":"The fake forms campaigns works like the simples campaigns except that you can display a previously built fake form. You can also define an action if the target submits the form. This can be a redirection or an awareness web page. The fake form, and the action after submit will be hosted using the domain defined in the \"Host domain\" field","title":"Fake form campaign"},{"location":"campaigns/#fake-ransom-campaign","text":"","title":"Fake ransom campaign"},{"location":"campaigns/#test-feature","text":"Once your campaign is created, it can be tested using the test functionality. By clicking on the following button, a popup will be displayed to specify a mail address to receive the mail. This will allow you to test the whole campaign without polluting the statistics before the beginning.","title":"Test feature"},{"location":"campaigns/#dashboard","text":"Once your campaign is started, you can display a dashboard to get campaign progress: By clicking on the following button, a popup will be display useful information about your campaign:","title":"Dashboard"},{"location":"campaigns/#ids-submission","text":"This functionality allows you to submit ID from targets who signaled the mail to security teams. Ids can be found: In the links generated in the received mail In the mail headers In the trackers urls You can paste full links, ids will be extracted automatically.","title":"IDs submission"},{"location":"campaigns/#downloading-results","text":"Anonymous results can be downloaded using the dedicated button. A XLSX file will be dropped automatically (can take some time for a big campaign). In the results the mail address is deleted and replaced by the targets IDs. This behavior has been asked by French trade unions, to prevent identifying people. But you can bypass this by adding a tag with the mail or name. We do not recommend this as we're not here to reprimand users!","title":"Downloading results"},{"location":"installation/","text":"Installation Requirements Swordphish requires a few important things before starting installation process: A server : we recommend to adjust the choice of the server depending on the campaign sizes you want to do (100k targets is a BIG campaign) At least two domains names : one to join Swordphish web page and at least one phishing domain (to send mails and host phishing pages) A mail server : we won't cover the mail server installation here, but keep in mind that a well configured mail server can accelerate drastically phishing mails diffusion The domain name used to join Swordphish interface must have at least an A entry in the DNS zone pointing to the server's IP. The domain(s) used to send mail and host phishing pages must have at least two entry in the DNS Zone. An A entry pointing to the server and a subdomain wildcard entry pointing to the same server IP (it allows to use subdomains in phishing pages). The following installation process has been tested on Ubuntu Server (16.04) but you can use any Linux (or Unix?) distro you like, but we won't provide any support for that. Installing Dependencies Required packages: apt install build-essential libpq-dev nginx git supervisor redis-server apt install python3-dev python3-pip postgresql postgresql-contrib apt install virtualenv virtualenvwrapper Create a dedicated user for security purpose: adduser swordphish --disabled-password Add the following line in the user's \\~/.profile to enable virtualenvwrapper: export WORKON_HOME = ~/.virtualenvs mkdir -p $WORKON_HOME source $( which virtualenvwrapper.sh ) Switch to newly created user and git-clone Swordphish repository: su - swordphish git clone https://github.com/societe-generale/swordphish-awareness.git swordphish Ensure that virtualenvwrapper has been loaded in user's environment and create the virtualenv: source ~/.profile mkvirtualenv -p python3 -a /home/swordphish/swordphish/ swordphish You can choose not to create the virtualenv, but we highly recommend it to prevent any side effect with another app installed on the same server for example. Install all the python dependencies: pip install -r requirements.txt Configuring and Creating database Switch to postgresql user: su - postgres createuser -P swordphish createdb --owner swordphish swordphish Don't forget the password you'll need it later! Depending on the size of the campaigns you want to do, consider tuning Postgresql performance depending of the machine you run swordphish on. Here is a list of parameter you should consider adapt: shared_buffers : memory used to cache data, consider setting this to 1/4 of the total RAM work_mem : 50MB is a nice value if you have more than 16go of RAM maintenance_work_mem : the maximum memory postgres can use for maintenance (index creation etc.) wal_buffers : 1/32 of the size of shared_buffers, with an upper limit of 16MB effective_cache_size : 1/2 of total memory would be a normal conservative setting Swordphish Configuration Now let's adapt Swordphish to your environment. Go to the path where you've installed the code and copy the settings.py file to a new one: cd /home/swordphish/swordphish/ cp Swordphish/settings.py Swordphish/settings_prod.py Then generate a new secret-key: workon swordphish ./manage.py generate_secret_key Then open the newly created settings_prod.py with your favorite editor. Here is the value you must change: ADMINS : fill the array with the different admins' mails (they'll receive stacktraces and potential errors) DEBUG : set this to False once you have tested everything DATABASES : set the credentials of the postgres account you created before SWORDPHISH_URL : set this to the URL you'll use to reach Swordphish interface USER_ACCOUNT_CREATION_MAIL_SENDER : the mail address which will be used to send swordphish accounts creation mails USER_ACCOUNT_CREATION_MAIL_CONTACT : the mail address used as reply to in the swordphish accounts creation mails SERVER_EMAIL : mail address which will be used to send different mails like stacktraces EMAIL_HOST : mail server address EMAIL_PORT : mail server port EMAIL_HOST_USER : optional EMAIL_HOST_PASSWORD : optional HOSTING_DOMAIN : the domain which will be used to reach swordphish interface (used to prevent targets from reaching the interface using phishing domains) Let's start using this freshly created config file: export DJANGO_SETTINGS_MODULE = 'Swordphish.settings_prod' Now let's create DB structure: ./manage.py migrate And create super admin user (use mail address as login): ./manage.py createsuperuser Finally collect different static files within static dir: ./manage.py collectstatic Setting up supervisor Now everything is configured let's create supervisor configuration files. This will start the app and the celery tasks. We chose supervisor because it's system agnostic and work whether you use SystemD, Upstart or whatever... Three configuration files are mandatory: cd /etc/supervisor/conf.d/ Use your favorite editor to create the three following files (adjust the different values depending on your system): swordphish_celery_beat.conf : to start the beat scheduler: [program:swordphish_celery_beat] environment=DJANGO_SETTINGS_MODULE='Swordphish.settings_prod' directory=/home/swordphish/swordphish/ command=/home/swordphish/.virtualenvs/swordphish/bin/celery -A Swordphish beat -l info user=swordphish autostart=true autorestart=true stdout_logfile=/var/log/supervisor/swordphish_celery_beat.log redirect_stderr=true swordphish_celery_worker.conf : to start the workers: [program:swordphish_celery_worker] environment=DJANGO_SETTINGS_MODULE='Swordphish.settings_prod' directory=/home/swordphish/swordphish/ command=/home/swordphish/.virtualenvs/swordphish/bin/celery -A Swordphish worker -l info user=swordphish autostart=true autorestart=true stdout_logfile=/var/log/supervisor/swordphish_celery_worker.log redirect_stderr=true swordphish.conf : to start the app server: [program:swordphish] environment=DJANGO_SETTINGS_MODULE='Swordphish.settings_prod' directory=/home/swordphish/swordphish/ command=/home/swordphish/.virtualenvs/swordphish/bin/uwsgi --ini /home/swordphish/swordphish/uwsgi/uwsgi.ini user=swordphish autostart=true autorestart=true stdout_logfile=/var/log/supervisor/swordphish.log redirect_stderr=true And start supervisor services: supervisorctl reread supervisorctl reload We recommend checking that everything run correctly using ps command and netstat. Nginx Configuration Now that the app server is running, we need to configure Nginx http server to access swordphish interface and phishing pages. Two sites config are mandatory for swordphish. One for Swordphish interface and one for the phishing domains. We recommend to host Swordphish using a TLS connection, here is an example of nginx configuration file: #UPSTREAM upstream swordphish { # Considering that the uwsgi service is running behind TCP 8000 port server 127.0.0.1:8000; } # HTTP SECTION # All requests redirected to HTTPS SECTION server { listen 80; server_name FIXME_HOSTNAME; rewrite ^ https://$server_name$request_uri? permanent; location /static/ { alias /home/swordphish/swordphish/static/; #Adjust depending on your config } } # HTTPS SECTION server { listen 443; server_name FIXME_HOSTNAME; location /static/ { alias /home/swordphish/swordphish/static/; #Adjust depending on your config } ssl on; ssl_certificate /etc/ssl/certs/FIXME_CERTIFICATE; ssl_certificate_key /etc/ssl/private/FIXME_PRIVATE_KEY; ssl_session_cache shared:SSL:50m; ssl_session_timeout 5m; ssl_protocols TLSv1.1 TLSv1.2; #ssl_ciphers \"EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\"; ssl_ciphers \"EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH EDH+aRSA!RC4!aNULL!eNULL!LOW!3DES!MD5!EXP!PSK!SRP!DSS\"; #ssl_ciphers DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:EDH-RSA-DES-CBC3-SHA:AES256-SHA:DES-CBC3-SHA:AES128-SHA;#:RC4-SHA:RC4-MD5; ssl_prefer_server_ciphers on; ssl_dhparam /etc/ssl/certs/FIXME_DH_PARAMS; access_log /var/log/nginx/swordphish_access.log; error_log /var/log/nginx/swordphish_error.log warn; add_header Strict-Transport-Security max-age=63072000; add_header X-Frame-Options DENY; add_header X-Content-Type-Options nosniff; error_page 403 /errors/error.html; # Allows big file upload client_max_body_size 0; proxy_connect_timeout 600; proxy_send_timeout 600; proxy_read_timeout 600; send_timeout 600; # FIR location / { proxy_pass http://swordphish; proxy_set_header Host $http_host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } Phishing domains are hosted with classic HTTP service, and a \\\"server\\\" section is required for every phishing domain you want to use. Here is a nginx config file example: #UPSTREAM upstream swordphish { # Considering that the uwsgi service is running behind TCP 8000 port server 127.0.0.1:8000; } server { listen 80; server_name .fixme-example.net; error_page 403 /errors/error.html; # Allows big file upload client_max_body_size 0; # Swordphish location / { proxy_pass http://swordphish; proxy_set_header Host fixme-example.net; } server { listen 80; server_name .fixme-example2.net; error_page 403 /errors/error.html; # Allows big file upload client_max_body_size 0; # Swordphish location / { proxy_pass http://swordphish; proxy_set_header Host fixme-example2.net; } Create the two files here: touch /etc/nginx/sites-available/swordphish.conf touch /etc/nginx/sites-available/swordphish_phishing_domains.conf And link them to the sites-enabled: ln -s /etc/nginx/sites-available/swordphish.conf /etc/nginx/sites-enabled/swordphish.conf ln -s /etc/nginx/sites-available/swordphish_phishing_domains.conf /etc/nginx/sites-enabled/swordphish_phishing_domains.conf Then restart nginx: systemctl restart nginx # (considering you're using systemd) Swordphish last setup Now you should be able to reach Swordphish interface. Start your favorite browser and browse to the interface. You should be able to see something like this. Then log into Swordphish using the superuser account you create before. Then go to the django admin interface. Then go to the phishmail domains management interface. Click on the \\\"add\\\" button, fill the form and save. Repeat this operation to add all your phishmail domains. Congratulation, you're now ready to phish Antispam? Sending a lot of emails will maybe trigger your antispam / anti-phishing solution. Don't forget to set up the SPF entry of your phishing domains and if necessary whitelist the mail server on your infrastructure. About phishing domains We highly recommend to create and follow an abuse mailbox on your phishing domains. Your phishing mail will probably be forwarded outside your organization, and it can have repercussion. Keeping an eye on abuse mailboxes will allow you to manage these cases most of the time.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#requirements","text":"Swordphish requires a few important things before starting installation process: A server : we recommend to adjust the choice of the server depending on the campaign sizes you want to do (100k targets is a BIG campaign) At least two domains names : one to join Swordphish web page and at least one phishing domain (to send mails and host phishing pages) A mail server : we won't cover the mail server installation here, but keep in mind that a well configured mail server can accelerate drastically phishing mails diffusion The domain name used to join Swordphish interface must have at least an A entry in the DNS zone pointing to the server's IP. The domain(s) used to send mail and host phishing pages must have at least two entry in the DNS Zone. An A entry pointing to the server and a subdomain wildcard entry pointing to the same server IP (it allows to use subdomains in phishing pages). The following installation process has been tested on Ubuntu Server (16.04) but you can use any Linux (or Unix?) distro you like, but we won't provide any support for that.","title":"Requirements"},{"location":"installation/#installing-dependencies","text":"Required packages: apt install build-essential libpq-dev nginx git supervisor redis-server apt install python3-dev python3-pip postgresql postgresql-contrib apt install virtualenv virtualenvwrapper Create a dedicated user for security purpose: adduser swordphish --disabled-password Add the following line in the user's \\~/.profile to enable virtualenvwrapper: export WORKON_HOME = ~/.virtualenvs mkdir -p $WORKON_HOME source $( which virtualenvwrapper.sh ) Switch to newly created user and git-clone Swordphish repository: su - swordphish git clone https://github.com/societe-generale/swordphish-awareness.git swordphish Ensure that virtualenvwrapper has been loaded in user's environment and create the virtualenv: source ~/.profile mkvirtualenv -p python3 -a /home/swordphish/swordphish/ swordphish You can choose not to create the virtualenv, but we highly recommend it to prevent any side effect with another app installed on the same server for example. Install all the python dependencies: pip install -r requirements.txt","title":"Installing Dependencies"},{"location":"installation/#configuring-and-creating-database","text":"Switch to postgresql user: su - postgres createuser -P swordphish createdb --owner swordphish swordphish Don't forget the password you'll need it later! Depending on the size of the campaigns you want to do, consider tuning Postgresql performance depending of the machine you run swordphish on. Here is a list of parameter you should consider adapt: shared_buffers : memory used to cache data, consider setting this to 1/4 of the total RAM work_mem : 50MB is a nice value if you have more than 16go of RAM maintenance_work_mem : the maximum memory postgres can use for maintenance (index creation etc.) wal_buffers : 1/32 of the size of shared_buffers, with an upper limit of 16MB effective_cache_size : 1/2 of total memory would be a normal conservative setting","title":"Configuring and Creating database"},{"location":"installation/#swordphish-configuration","text":"Now let's adapt Swordphish to your environment. Go to the path where you've installed the code and copy the settings.py file to a new one: cd /home/swordphish/swordphish/ cp Swordphish/settings.py Swordphish/settings_prod.py Then generate a new secret-key: workon swordphish ./manage.py generate_secret_key Then open the newly created settings_prod.py with your favorite editor. Here is the value you must change: ADMINS : fill the array with the different admins' mails (they'll receive stacktraces and potential errors) DEBUG : set this to False once you have tested everything DATABASES : set the credentials of the postgres account you created before SWORDPHISH_URL : set this to the URL you'll use to reach Swordphish interface USER_ACCOUNT_CREATION_MAIL_SENDER : the mail address which will be used to send swordphish accounts creation mails USER_ACCOUNT_CREATION_MAIL_CONTACT : the mail address used as reply to in the swordphish accounts creation mails SERVER_EMAIL : mail address which will be used to send different mails like stacktraces EMAIL_HOST : mail server address EMAIL_PORT : mail server port EMAIL_HOST_USER : optional EMAIL_HOST_PASSWORD : optional HOSTING_DOMAIN : the domain which will be used to reach swordphish interface (used to prevent targets from reaching the interface using phishing domains) Let's start using this freshly created config file: export DJANGO_SETTINGS_MODULE = 'Swordphish.settings_prod' Now let's create DB structure: ./manage.py migrate And create super admin user (use mail address as login): ./manage.py createsuperuser Finally collect different static files within static dir: ./manage.py collectstatic","title":"Swordphish Configuration"},{"location":"installation/#setting-up-supervisor","text":"Now everything is configured let's create supervisor configuration files. This will start the app and the celery tasks. We chose supervisor because it's system agnostic and work whether you use SystemD, Upstart or whatever... Three configuration files are mandatory: cd /etc/supervisor/conf.d/ Use your favorite editor to create the three following files (adjust the different values depending on your system): swordphish_celery_beat.conf : to start the beat scheduler: [program:swordphish_celery_beat] environment=DJANGO_SETTINGS_MODULE='Swordphish.settings_prod' directory=/home/swordphish/swordphish/ command=/home/swordphish/.virtualenvs/swordphish/bin/celery -A Swordphish beat -l info user=swordphish autostart=true autorestart=true stdout_logfile=/var/log/supervisor/swordphish_celery_beat.log redirect_stderr=true swordphish_celery_worker.conf : to start the workers: [program:swordphish_celery_worker] environment=DJANGO_SETTINGS_MODULE='Swordphish.settings_prod' directory=/home/swordphish/swordphish/ command=/home/swordphish/.virtualenvs/swordphish/bin/celery -A Swordphish worker -l info user=swordphish autostart=true autorestart=true stdout_logfile=/var/log/supervisor/swordphish_celery_worker.log redirect_stderr=true swordphish.conf : to start the app server: [program:swordphish] environment=DJANGO_SETTINGS_MODULE='Swordphish.settings_prod' directory=/home/swordphish/swordphish/ command=/home/swordphish/.virtualenvs/swordphish/bin/uwsgi --ini /home/swordphish/swordphish/uwsgi/uwsgi.ini user=swordphish autostart=true autorestart=true stdout_logfile=/var/log/supervisor/swordphish.log redirect_stderr=true And start supervisor services: supervisorctl reread supervisorctl reload We recommend checking that everything run correctly using ps command and netstat.","title":"Setting up supervisor"},{"location":"installation/#nginx-configuration","text":"Now that the app server is running, we need to configure Nginx http server to access swordphish interface and phishing pages. Two sites config are mandatory for swordphish. One for Swordphish interface and one for the phishing domains. We recommend to host Swordphish using a TLS connection, here is an example of nginx configuration file: #UPSTREAM upstream swordphish { # Considering that the uwsgi service is running behind TCP 8000 port server 127.0.0.1:8000; } # HTTP SECTION # All requests redirected to HTTPS SECTION server { listen 80; server_name FIXME_HOSTNAME; rewrite ^ https://$server_name$request_uri? permanent; location /static/ { alias /home/swordphish/swordphish/static/; #Adjust depending on your config } } # HTTPS SECTION server { listen 443; server_name FIXME_HOSTNAME; location /static/ { alias /home/swordphish/swordphish/static/; #Adjust depending on your config } ssl on; ssl_certificate /etc/ssl/certs/FIXME_CERTIFICATE; ssl_certificate_key /etc/ssl/private/FIXME_PRIVATE_KEY; ssl_session_cache shared:SSL:50m; ssl_session_timeout 5m; ssl_protocols TLSv1.1 TLSv1.2; #ssl_ciphers \"EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\"; ssl_ciphers \"EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH EDH+aRSA!RC4!aNULL!eNULL!LOW!3DES!MD5!EXP!PSK!SRP!DSS\"; #ssl_ciphers DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:EDH-RSA-DES-CBC3-SHA:AES256-SHA:DES-CBC3-SHA:AES128-SHA;#:RC4-SHA:RC4-MD5; ssl_prefer_server_ciphers on; ssl_dhparam /etc/ssl/certs/FIXME_DH_PARAMS; access_log /var/log/nginx/swordphish_access.log; error_log /var/log/nginx/swordphish_error.log warn; add_header Strict-Transport-Security max-age=63072000; add_header X-Frame-Options DENY; add_header X-Content-Type-Options nosniff; error_page 403 /errors/error.html; # Allows big file upload client_max_body_size 0; proxy_connect_timeout 600; proxy_send_timeout 600; proxy_read_timeout 600; send_timeout 600; # FIR location / { proxy_pass http://swordphish; proxy_set_header Host $http_host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } Phishing domains are hosted with classic HTTP service, and a \\\"server\\\" section is required for every phishing domain you want to use. Here is a nginx config file example: #UPSTREAM upstream swordphish { # Considering that the uwsgi service is running behind TCP 8000 port server 127.0.0.1:8000; } server { listen 80; server_name .fixme-example.net; error_page 403 /errors/error.html; # Allows big file upload client_max_body_size 0; # Swordphish location / { proxy_pass http://swordphish; proxy_set_header Host fixme-example.net; } server { listen 80; server_name .fixme-example2.net; error_page 403 /errors/error.html; # Allows big file upload client_max_body_size 0; # Swordphish location / { proxy_pass http://swordphish; proxy_set_header Host fixme-example2.net; } Create the two files here: touch /etc/nginx/sites-available/swordphish.conf touch /etc/nginx/sites-available/swordphish_phishing_domains.conf And link them to the sites-enabled: ln -s /etc/nginx/sites-available/swordphish.conf /etc/nginx/sites-enabled/swordphish.conf ln -s /etc/nginx/sites-available/swordphish_phishing_domains.conf /etc/nginx/sites-enabled/swordphish_phishing_domains.conf Then restart nginx: systemctl restart nginx # (considering you're using systemd)","title":"Nginx Configuration"},{"location":"installation/#swordphish-last-setup","text":"Now you should be able to reach Swordphish interface. Start your favorite browser and browse to the interface. You should be able to see something like this. Then log into Swordphish using the superuser account you create before. Then go to the django admin interface. Then go to the phishmail domains management interface. Click on the \\\"add\\\" button, fill the form and save. Repeat this operation to add all your phishmail domains. Congratulation, you're now ready to phish","title":"Swordphish last setup"},{"location":"installation/#antispam","text":"Sending a lot of emails will maybe trigger your antispam / anti-phishing solution. Don't forget to set up the SPF entry of your phishing domains and if necessary whitelist the mail server on your infrastructure.","title":"Antispam?"},{"location":"installation/#about-phishing-domains","text":"We highly recommend to create and follow an abuse mailbox on your phishing domains. Your phishing mail will probably be forwarded outside your organization, and it can have repercussion. Keeping an eye on abuse mailboxes will allow you to manage these cases most of the time.","title":"About phishing domains"},{"location":"special-features/","text":"Special Features Autolock account For security reason, a mechanism locking automatically unused account has been developed. When an account is created and the user never logged in, the account is automatically disabled after a certain amount of time and a mail is sent to the user. When an account is not used during a customizable amount of time, it's automatically blocked and a mail is also sent to the user. It can be customized using the following parameters in the settings.py file: # After AUTOLOCK_DELAY days of inactivity account will be blocked AUTOLOCK_DELAY = 180 # Mail sent when an account is auto locked AUTOLOCK_TEMPLATE = u \"\"\"Hello %s You have an active account on Swordphish but you never logged in. As a security measure, your account has been locked. If you need it reply this mail! Best regards, Swordphish administrators \"\"\" # AUTOLOCK_NEVER_USED_DELAY days after creation an account will be locked if not used AUTOLOCK_NEVER_USED_DELAY = 30 # Mail sent when an account is never used AUTOLOCK_NEVER_USED_TEMPLATE = u \"\"\"Hello %s You have an active account on Swordphish but didn't use during the last %s days. As a security measure, your account has been locked. If you need it reply this mail! Best regards, Swordphish administrators \"\"\" Autoclean To prevent the accumulation of campaigns results and targets lists in time, we've developed an autoclean feature which automatically deletes the lists and the campaigns results after a customizable amount of time. It can be customized using the following parameters in the settings.py file: # After AUTOCLEAN_DELAY days the campaigns / targets will be automatically deleted AUTOCLEAN_DELAY = 90 # The day of the week when the auto delete is performed AUTOCLEAN_DAY = \"saturday\" Special mail header A special header is automatically added in the phishing mails sent by swordphish. The name of this header can be customized in settings.py file, by default the value is: PHISHING_MAIL_HEADER = \"X-Swordphish-Awareness-Campaign\" The header contains the target-id between brackets, ex: X-Sworphish-Awareness-Campaign: [0916e333-ad79-4102-a220-13dbd7ad4195] You can use this to extract automatically the ID and count the mail as reported using a plugin in your mail client using the report API (see below). Report API The report API allows to mark the mail as \"reported\" programmatically. It's used at Soci\u00e9t\u00e9 G\u00e9n\u00e9rale in our Outlook plugin. When the mail is detected as swordphish campaign by the plugin using the customized header, the plugin then sends an HTTP GET request to this URL to count the mail as reported. The URL is structured like this: https?://swordphish_hostname/result/report/<target-id> Example: https?://swordphish_hostname/result/report/0916e333-ad79-4102-a220-13dbd7ad4195 Phishing domain feed A json feed listing all the phishing domains is available on the following URL: https?://swordphish_hosntame/2985836c7501af76a0bdd92f1d120cd2/domains_feed This feature can be useful to integrate this feed in your security monitoring tools automatically (SIEM) so your security teams (SOC / CERT) will know if this suspicious domain is linked to a phishing awareness campaign.","title":"Special Features"},{"location":"special-features/#special-features","text":"","title":"Special Features"},{"location":"special-features/#autolock-account","text":"For security reason, a mechanism locking automatically unused account has been developed. When an account is created and the user never logged in, the account is automatically disabled after a certain amount of time and a mail is sent to the user. When an account is not used during a customizable amount of time, it's automatically blocked and a mail is also sent to the user. It can be customized using the following parameters in the settings.py file: # After AUTOLOCK_DELAY days of inactivity account will be blocked AUTOLOCK_DELAY = 180 # Mail sent when an account is auto locked AUTOLOCK_TEMPLATE = u \"\"\"Hello %s You have an active account on Swordphish but you never logged in. As a security measure, your account has been locked. If you need it reply this mail! Best regards, Swordphish administrators \"\"\" # AUTOLOCK_NEVER_USED_DELAY days after creation an account will be locked if not used AUTOLOCK_NEVER_USED_DELAY = 30 # Mail sent when an account is never used AUTOLOCK_NEVER_USED_TEMPLATE = u \"\"\"Hello %s You have an active account on Swordphish but didn't use during the last %s days. As a security measure, your account has been locked. If you need it reply this mail! Best regards, Swordphish administrators \"\"\"","title":"Autolock account"},{"location":"special-features/#autoclean","text":"To prevent the accumulation of campaigns results and targets lists in time, we've developed an autoclean feature which automatically deletes the lists and the campaigns results after a customizable amount of time. It can be customized using the following parameters in the settings.py file: # After AUTOCLEAN_DELAY days the campaigns / targets will be automatically deleted AUTOCLEAN_DELAY = 90 # The day of the week when the auto delete is performed AUTOCLEAN_DAY = \"saturday\"","title":"Autoclean"},{"location":"special-features/#special-mail-header","text":"A special header is automatically added in the phishing mails sent by swordphish. The name of this header can be customized in settings.py file, by default the value is: PHISHING_MAIL_HEADER = \"X-Swordphish-Awareness-Campaign\" The header contains the target-id between brackets, ex: X-Sworphish-Awareness-Campaign: [0916e333-ad79-4102-a220-13dbd7ad4195] You can use this to extract automatically the ID and count the mail as reported using a plugin in your mail client using the report API (see below).","title":"Special mail header"},{"location":"special-features/#report-api","text":"The report API allows to mark the mail as \"reported\" programmatically. It's used at Soci\u00e9t\u00e9 G\u00e9n\u00e9rale in our Outlook plugin. When the mail is detected as swordphish campaign by the plugin using the customized header, the plugin then sends an HTTP GET request to this URL to count the mail as reported. The URL is structured like this: https?://swordphish_hostname/result/report/<target-id> Example: https?://swordphish_hostname/result/report/0916e333-ad79-4102-a220-13dbd7ad4195","title":"Report API"},{"location":"special-features/#phishing-domain-feed","text":"A json feed listing all the phishing domains is available on the following URL: https?://swordphish_hosntame/2985836c7501af76a0bdd92f1d120cd2/domains_feed This feature can be useful to integrate this feed in your security monitoring tools automatically (SIEM) so your security teams (SOC / CERT) will know if this suspicious domain is linked to a phishing awareness campaign.","title":"Phishing domain feed"},{"location":"targets/","text":"Targets Targets are the people you want to send fake phishing to. They're organised in targets lists. After having created a target list, there is two-way to create targets in it: manually : adding every target, keys and values manually, which can be a bit painful... importing an xslx file : you can build your list in Excel or Open Office or whatever xlsx file editor, then import the full list in one time Tags To allow you to create accurate statistics when making campaigns, swordphish allows to tag the targets with keys and values. The goal is to identify populations who need more awareness, or, for example, to check if your last awareness campaign was efficient. On this case you can tag every target with the key \"awareness\" and the value \"yes\" or \"no\" if they were trained or not. But you are free to tag the way you want (respect your local law, no sexual or racial tags for example). The tags will be available in the campaigns results to permit to do statistics based on them and prioritize your next awareness campaigns. xlsx file We chose to use XLSX file to import list because we think that Excel is very mainstream on corporate computers and because XLSX files are utf-8 encoded. The format expected is simple. The first line must be formatted like this: email | key1 | key2 | key3 ... (keys are optional) Then every line must be filled liked this: mail@mail.com | val1 | val2 | val3 ... (valus are optional) An export function is also available to edit easily an existing list or to keep it for another campaign.","title":"Targets"},{"location":"targets/#targets","text":"Targets are the people you want to send fake phishing to. They're organised in targets lists. After having created a target list, there is two-way to create targets in it: manually : adding every target, keys and values manually, which can be a bit painful... importing an xslx file : you can build your list in Excel or Open Office or whatever xlsx file editor, then import the full list in one time","title":"Targets"},{"location":"targets/#tags","text":"To allow you to create accurate statistics when making campaigns, swordphish allows to tag the targets with keys and values. The goal is to identify populations who need more awareness, or, for example, to check if your last awareness campaign was efficient. On this case you can tag every target with the key \"awareness\" and the value \"yes\" or \"no\" if they were trained or not. But you are free to tag the way you want (respect your local law, no sexual or racial tags for example). The tags will be available in the campaigns results to permit to do statistics based on them and prioritize your next awareness campaigns.","title":"Tags"},{"location":"targets/#xlsx-file","text":"We chose to use XLSX file to import list because we think that Excel is very mainstream on corporate computers and because XLSX files are utf-8 encoded. The format expected is simple. The first line must be formatted like this: email | key1 | key2 | key3 ... (keys are optional) Then every line must be filled liked this: mail@mail.com | val1 | val2 | val3 ... (valus are optional) An export function is also available to edit easily an existing list or to keep it for another campaign.","title":"xlsx file"},{"location":"templates/","text":"Templates Templates are all the mails / attachment / web pages that will be sent or displayed to the targets in the different campaigns. Different kind of templates are available, depending on the kind of campaign you want to run: Common best practices to create templates: Picture resizing on the fly (by setting width or height values) are sometimes not taken in consideration by mail clients and word It's recommended to test templates before starting a campaign using the test functionality (campaigns test functionality) Templates can be shared with the community using the tick box at the bottom of the form. This will authorize any SwordPHISH user to use it for a campaign. A \"fullscreen\" button is provided in the rich text editor for a better user experience Standard templates This category regroups templates of files / mails that will be sent to the targets. Mails with link This template is the most common one; it corresponds to a simple mail with a link. The only constraint to use this kind of template is to insert a link in the HTML that points to \"FIXMEURL\". This keyword is used to inject the target's dedicated link. When creating or editing this kind of template, this constraint will be automatically checked and an error will be displayed in case of omission. The \"Subject\" input corresponds to the mail's title. It's possible to customize emails with targets tags using ($tag_name$) tags. It'll be replaced automatically when the campaign starts by the tag value corresponding to the tag name if available. Mails with attachment This kind of template corresponds to a mail that will have an attachment. Contrary to the \"mail with link\" template it doesn't need any link. Like the mails with links, it's also possible to customize mails with attachment with targets tags. The syntax is exactly the same: ($tag_name$) Attachment This template corresponds to the attachment that will be added to the mail. The attachment is created as an HTML file and is converted on the fly as an Office Word \".doc\" file. No special requirements are expected to use this kind of template. Actions after click This category regroups templates of actions that will be done once the targets will click on the malicious links. Redirection This template is used to define redirection to an arbitrary URL. You only have to provide a URL using the standard format: http(s)://(www.)?domain.tld(/webpage)? Awareness This template allows you to create an awareness webpage that will be displayed to the user in case of click on a malicious link. Fake form This template allows you to create a fake form to lure targets. A set of buttons dedicated to forms creation is added to the rich editor: An HTML form must be inserted in the template using the first button: You can then use the \"text input\" and \"button\" buttons to create your form. At least one \"submit\" button must be inserted within the HTML form: You can then use the \"text input\" and \"button\" buttons to create your form. At least one \"submit\" button must be inserted within the HTML form The fake form will be forged automatically in a way that no credential will be sent through the internet for evident reasons of confidentiality. No credential will be harvested during the campaigns. Fake ransomware Fake ransomware has been developed to frighten a bit more swordphish targets. Be reassured, it won't encrypt any file. It's a more tech scam than a ransomware. The goal is to display an image to lure targets to click on it, then the webpage will go fullscreen during a certain amount of time to pretend that the target's browser is blocked displaying a frightening message. Of course the browser won't be blocked. When the timer reach 0, another customizable on click action will be triggered (awareness, redirection...) To create a fake ransomware template, create one page and use \"normal\" style on the first practices. and \"normal (div)\" on the second part. swordphish will automatically deal with it and display each part when necessary. Add images to templates To add images in your templates please follow these steps: click on the dedicated button choose a file and \"that's it\", file are stored directly within the HTML code in base64 you can change image size by right-clicking on it and using \"image\" submenu","title":"Templates"},{"location":"templates/#templates","text":"Templates are all the mails / attachment / web pages that will be sent or displayed to the targets in the different campaigns. Different kind of templates are available, depending on the kind of campaign you want to run: Common best practices to create templates: Picture resizing on the fly (by setting width or height values) are sometimes not taken in consideration by mail clients and word It's recommended to test templates before starting a campaign using the test functionality (campaigns test functionality) Templates can be shared with the community using the tick box at the bottom of the form. This will authorize any SwordPHISH user to use it for a campaign. A \"fullscreen\" button is provided in the rich text editor for a better user experience","title":"Templates"},{"location":"templates/#standard-templates","text":"This category regroups templates of files / mails that will be sent to the targets.","title":"Standard templates"},{"location":"templates/#mails-with-link","text":"This template is the most common one; it corresponds to a simple mail with a link. The only constraint to use this kind of template is to insert a link in the HTML that points to \"FIXMEURL\". This keyword is used to inject the target's dedicated link. When creating or editing this kind of template, this constraint will be automatically checked and an error will be displayed in case of omission. The \"Subject\" input corresponds to the mail's title. It's possible to customize emails with targets tags using ($tag_name$) tags. It'll be replaced automatically when the campaign starts by the tag value corresponding to the tag name if available.","title":"Mails with link"},{"location":"templates/#mails-with-attachment","text":"This kind of template corresponds to a mail that will have an attachment. Contrary to the \"mail with link\" template it doesn't need any link. Like the mails with links, it's also possible to customize mails with attachment with targets tags. The syntax is exactly the same: ($tag_name$)","title":"Mails with attachment"},{"location":"templates/#attachment","text":"This template corresponds to the attachment that will be added to the mail. The attachment is created as an HTML file and is converted on the fly as an Office Word \".doc\" file. No special requirements are expected to use this kind of template.","title":"Attachment"},{"location":"templates/#actions-after-click","text":"This category regroups templates of actions that will be done once the targets will click on the malicious links.","title":"Actions after click"},{"location":"templates/#redirection","text":"This template is used to define redirection to an arbitrary URL. You only have to provide a URL using the standard format: http(s)://(www.)?domain.tld(/webpage)?","title":"Redirection"},{"location":"templates/#awareness","text":"This template allows you to create an awareness webpage that will be displayed to the user in case of click on a malicious link.","title":"Awareness"},{"location":"templates/#fake-form","text":"This template allows you to create a fake form to lure targets. A set of buttons dedicated to forms creation is added to the rich editor: An HTML form must be inserted in the template using the first button: You can then use the \"text input\" and \"button\" buttons to create your form. At least one \"submit\" button must be inserted within the HTML form: You can then use the \"text input\" and \"button\" buttons to create your form. At least one \"submit\" button must be inserted within the HTML form The fake form will be forged automatically in a way that no credential will be sent through the internet for evident reasons of confidentiality. No credential will be harvested during the campaigns.","title":"Fake form"},{"location":"templates/#fake-ransomware","text":"Fake ransomware has been developed to frighten a bit more swordphish targets. Be reassured, it won't encrypt any file. It's a more tech scam than a ransomware. The goal is to display an image to lure targets to click on it, then the webpage will go fullscreen during a certain amount of time to pretend that the target's browser is blocked displaying a frightening message. Of course the browser won't be blocked. When the timer reach 0, another customizable on click action will be triggered (awareness, redirection...) To create a fake ransomware template, create one page and use \"normal\" style on the first practices. and \"normal (div)\" on the second part. swordphish will automatically deal with it and display each part when necessary.","title":"Fake ransomware"},{"location":"templates/#add-images-to-templates","text":"To add images in your templates please follow these steps: click on the dedicated button choose a file and \"that's it\", file are stored directly within the HTML code in base64 you can change image size by right-clicking on it and using \"image\" submenu","title":"Add images to templates"},{"location":"users-management/","text":"Users management Overview Users management menu is available for django staff and entities admins only. Swordphish users management has been built to allow collaboration within the same team of users. Visibility can be organised using entities and regions . Regions are sub parts of entities , and you can create them to fit your organisation. For example, if your structure is composed of retail banks and investment banks, you can create two entities 'Retail' and 'Investment' then create sub-regions for every country, like Retail France, Retail Germany, Investment UK, Investment Asia... If a user is positioned as admin in an entity, he will be able to create users accounts and position them in his regions or entities. He will also see every campaign created in his entities and regions by every user. If you position several users in the same region they will be able to see each others targets lists, templates and campaigns. Users Users interface displays the different users accounts already existing in Swordphish with a filter based on mail address. User creation is kinda straightforward, after having filled the form, a mail will automatically be sent to the user with a temporary password that need to be changed at the first connection. Entities Entities interface displays the different existing entities and also creation menu and admin management. Regions Regions interface is quite the same except that you have to choose the entity to attach to when creating organised","title":"Users management"},{"location":"users-management/#users-management","text":"","title":"Users management"},{"location":"users-management/#overview","text":"Users management menu is available for django staff and entities admins only. Swordphish users management has been built to allow collaboration within the same team of users. Visibility can be organised using entities and regions . Regions are sub parts of entities , and you can create them to fit your organisation. For example, if your structure is composed of retail banks and investment banks, you can create two entities 'Retail' and 'Investment' then create sub-regions for every country, like Retail France, Retail Germany, Investment UK, Investment Asia... If a user is positioned as admin in an entity, he will be able to create users accounts and position them in his regions or entities. He will also see every campaign created in his entities and regions by every user. If you position several users in the same region they will be able to see each others targets lists, templates and campaigns.","title":"Overview"},{"location":"users-management/#users","text":"Users interface displays the different users accounts already existing in Swordphish with a filter based on mail address. User creation is kinda straightforward, after having filled the form, a mail will automatically be sent to the user with a temporary password that need to be changed at the first connection.","title":"Users"},{"location":"users-management/#entities","text":"Entities interface displays the different existing entities and also creation menu and admin management.","title":"Entities"},{"location":"users-management/#regions","text":"Regions interface is quite the same except that you have to choose the entity to attach to when creating organised","title":"Regions"}]}